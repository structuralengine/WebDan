{"version":3,"sources":["routes.js"],"names":["angular","module","config","$routeProvider","SECURED_ROUTES","whenAuthenticated","path","route","resolve","user","Auth","$requireSignIn","when","templateUrl","controller","controllerAs","otherwise","redirectTo","run","$rootScope","$location","loginRedirectPath","$onAuthStateChanged","check","$on","e","next","prev","err","authRequired","hasOwnProperty","constant"],"mappings":"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","file":"routes.js","sourcesContent":["'use strict';\r\n/**\r\n * @ngdoc overview\r\n * @name webdan:routes\r\n * @description\r\n * # routes.js\r\n *\r\n * Configure routes for use with Angular, and apply authentication security\r\n * Add new routes using `yo angularfire:route` with the optional --auth-required flag.\r\n *\r\n * Any controller can be secured so that it will only load if user is logged in by\r\n * using `whenAuthenticated()` in place of `when()`. This requires the user to\r\n * be logged in to view this route, and adds the current user into the dependencies\r\n * which can be injected into the controller. If user is not logged in, the promise is\r\n * rejected, which is handled below by $routeChangeError\r\n *\r\n * Any controller can be forced to wait for authentication to resolve, without necessarily\r\n * requiring the user to be logged in, by adding a `resolve` block similar to the one below.\r\n * It would then inject `user` as a dependency. This could also be done in the controller,\r\n * but abstracting it makes things cleaner (controllers don't need to worry about auth state\r\n * or timing of displaying its UI components; it can assume it is taken care of when it runs)\r\n *\r\n *   resolve: {\r\n *     user: ['Auth', function(Auth) {\r\n *       return Auth.$getAuth();\r\n *     }]\r\n *   }\r\n *\r\n */\r\nangular.module('webdan')\r\n\r\n/**\r\n * Adds a special `whenAuthenticated` method onto $routeProvider. This special method,\r\n * when called, invokes Auth.$requireSignIn() service (see Auth.js).\r\n *\r\n * The promise either resolves to the authenticated user object and makes it available to\r\n * dependency injection (see AccountCtrl), or rejects the promise if user is not logged in,\r\n * forcing a redirect to the /login page\r\n */\r\n  .config(['$routeProvider', 'SECURED_ROUTES', function($routeProvider, SECURED_ROUTES) {\r\n    // credits for this idea: https://groups.google.com/forum/#!msg/angular/dPr9BpIZID0/MgWVluo_Tg8J\r\n    // unfortunately, a decorator cannot be use here because they are not applied until after\r\n    // the .config calls resolve, so they can't be used during route configuration, so we have\r\n    // to hack it directly onto the $routeProvider object\r\n    $routeProvider.whenAuthenticated = function(path, route) {\r\n      route.resolve = route.resolve || {};\r\n      route.resolve.user = ['Auth', function(Auth) {\r\n        return Auth.$requireSignIn();\r\n      }];\r\n      $routeProvider.when(path, route);\r\n      SECURED_ROUTES[path] = true;\r\n      return $routeProvider;\r\n    };\r\n  }])\r\n\r\n  // configure views; whenAuthenticated adds a resolve method to ensure users authenticate\r\n  // before trying to access that route\r\n  .config(['$routeProvider', function($routeProvider) {\r\n    $routeProvider\r\n      .when('/login', {\r\n        templateUrl: 'views/login.html',\r\n        controller: 'LoginCtrl'\r\n      })\r\n      .whenAuthenticated('/account', {\r\n        templateUrl: 'views/account.html',\r\n        controller: 'AccountCtrl'\r\n      })\r\n      .whenAuthenticated('/basic-information', {\r\n        templateUrl: 'views/basic-information/index.html',\r\n        controller: 'BasicInformationIndexCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/member-section', {\r\n        templateUrl: 'views/member-section/index.html',\r\n        controller: 'MemberSectionIndexCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/design-point', {\r\n        templateUrl: 'views/design-point.html',\r\n        controller: 'DesignPointCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/bars', {\r\n        templateUrl: 'views/bars/index.html',\r\n        controller: 'BarsIndexCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/fatigue', {\r\n        templateUrl: 'views/fatigue.html',\r\n        controller: 'FatigueCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/safety-factor-material-strength', {\r\n        templateUrl: 'views/safety-factor-material-strength.html',\r\n        controller: 'SafetyFactorMaterialStrengthCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/section-forces', {\r\n        templateUrl: 'views/section-forces.html',\r\n        controller: 'SectionForcesCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/calculation-print', {\r\n        templateUrl: 'views/calculation-print.html',\r\n        controller: 'CalculationPrintCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/words', {\r\n        templateUrl: 'views/words/index.html',\r\n        controller: 'WordsIndexCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/pages', {\r\n        templateUrl: 'views/pages/index.html',\r\n        controller: 'PagesIndexCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/section-shapes', {\r\n        templateUrl: 'views/section-shapes/index.html',\r\n        controller: 'SectionShapesIndexCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/conditions', {\r\n        templateUrl: 'views/conditions/index.html',\r\n        controller: 'ConditionsIndexCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/member-sections', {\r\n        templateUrl: 'views/member-sections/index.html',\r\n        controller: 'MemberSectionsIndexCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .whenAuthenticated('/members', {\r\n        templateUrl: 'views/members/index.html',\r\n        controller: 'MembersIndexCtrl',\r\n        controllerAs: 'ctrl'\r\n      })\r\n      .otherwise({redirectTo: '/basic-information'});\r\n  }])\r\n\r\n  /**\r\n   * Apply some route security. Any route's resolve method can reject the promise with\r\n   * \"AUTH_REQUIRED\" to force a redirect. This method enforces that and also watches\r\n   * for changes in auth status which might require us to navigate away from a path\r\n   * that we can no longer view.\r\n   */\r\n  .run(['$rootScope', '$location', 'Auth', 'SECURED_ROUTES', 'loginRedirectPath',\r\n    function($rootScope, $location, Auth, SECURED_ROUTES, loginRedirectPath) {\r\n      // watch for login status changes and redirect if appropriate\r\n      Auth.$onAuthStateChanged(check);\r\n\r\n      // some of our routes may reject resolve promises with the special {authRequired: true} error\r\n      // this redirects to the login page whenever that is encountered\r\n      $rootScope.$on('$routeChangeError', function(e, next, prev, err) {\r\n        if( err === 'AUTH_REQUIRED' ) {\r\n          $location.path(loginRedirectPath);\r\n        }\r\n      });\r\n\r\n      function check(user) {\r\n        if( !user && authRequired($location.path()) ) {\r\n          $location.path(loginRedirectPath);\r\n        }\r\n      }\r\n\r\n      function authRequired(path) {\r\n        return SECURED_ROUTES.hasOwnProperty(path);\r\n      }\r\n    }\r\n  ])\r\n\r\n  // used by route security\r\n  .constant('SECURED_ROUTES', {});\r\n"]}