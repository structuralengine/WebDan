{"version":3,"sources":["controllers/pages/index.js"],"names":["angular","module","controller","$scope","$log","Page","ctrl","settings","allowInvalid","colHeaders","columns","data","validator","validators","ja","en","afterChange","change","source","changes","forEach","idx","prop","oldVal","newVal","page","pages","isUndefined","$id","add","update","err","error","query","$loaded","_pages","copy"],"mappings":"AAAA;;AAEA;;;;;;;;;;AAOAA,QAAQC,MAAR,CAAe,QAAf,EACGC,UADH,CACc,gBADd,EACgC,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAC5B,UAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,OAAO,IAAX;;AAEAA,OAAKC,QAAL,GAAgB;AACdC,kBAAc,KADA;AAEd;AACAC,gBAAY,CAAC,KAAD,EAAQ,IAAR,CAHE;AAIdC,aAAS,CACP,EAACC,MAAM,IAAP,EAAaC,WAAWP,KAAKQ,UAAL,CAAgBC,EAAxC,EADO,EAEP,EAACH,MAAM,IAAP,EAAaC,WAAWP,KAAKQ,UAAL,CAAgBE,EAAxC,EAFO,CAJK;AAQdC,iBAAa,qBAASC,MAAT,EAAiBC,MAAjB,EAAyB;AACpC,UAAIA,WAAW,UAAf,EAA2B;AACzB,YAAI;AACFC,kBAAQC,OAAR,CAAgB,UAASH,MAAT,EAAiB;AAAA,yCACGA,MADH;AAAA,gBAC1BI,GAD0B;AAAA,gBACrBC,IADqB;AAAA,gBACfC,MADe;AAAA,gBACPC,MADO;;AAE/B,gBAAIC,OAAOnB,KAAKoB,KAAL,CAAWL,GAAX,CAAX;AACA,gBAAIrB,QAAQ2B,WAAR,CAAoBF,KAAKG,GAAzB,CAAJ,EAAmC;AACjCvB,mBAAKwB,GAAL,CAASJ,IAAT;AACD,aAFD,MAEO;AACLpB,mBAAKyB,MAAL,CAAYL,KAAKG,GAAjB,EAAsBN,IAAtB,EAA4BE,MAA5B;AACD;AACF,WARD;AASD,SAVD,CAWA,OAAOO,GAAP,EAAY;AACV3B,eAAK4B,KAAL,CAAWD,GAAX;AACD;AACF;AACF;AAzBa,GAAhB;;AA6BA,MAAIL,cAAJ;AACArB,OAAK4B,KAAL,GAAaC,OAAb,CAAqB,UAASC,MAAT,EAAiB;AACpCT,YAAQS,MAAR;AACA7B,SAAKoB,KAAL,GAAa1B,QAAQoC,IAAR,CAAaD,MAAb,CAAb;AACD,GAHD;AAID,CAtC2B,CADhC","file":"index.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name webdan.controller:PagesIndexCtrl\r\n * @description\r\n * # PagesIndexCtrl\r\n * Controller of the webdan\r\n */\r\nangular.module('webdan')\r\n  .controller('PagesIndexCtrl', ['$scope', '$log', 'Page',\r\n    function($scope, $log, Page) {\r\n      let ctrl = this;\r\n\r\n      ctrl.settings = {\r\n        allowInvalid: false,\r\n        //stretchH: 'all',\r\n        colHeaders: ['日本語', '英語'],\r\n        columns: [\r\n          {data: 'ja', validator: Page.validators.ja},\r\n          {data: 'en', validator: Page.validators.en},\r\n        ],\r\n        afterChange: function(change, source) {\r\n          if (source !== 'loadData') {\r\n            try {\r\n              changes.forEach(function(change) {\r\n                let [idx, prop, oldVal, newVal] = change;\r\n                let page = ctrl.pages[idx];\r\n                if (angular.isUndefined(page.$id)) {\r\n                  Page.add(page);\r\n                } else {\r\n                  Page.update(page.$id, prop, newVal);\r\n                }\r\n              });\r\n            }\r\n            catch (err) {\r\n              $log.error(err);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n      let pages;\r\n      Page.query().$loaded(function(_pages) {\r\n        pages = _pages;\r\n        ctrl.pages = angular.copy(_pages);\r\n      });\r\n    }\r\n  ]);\r\n"]}